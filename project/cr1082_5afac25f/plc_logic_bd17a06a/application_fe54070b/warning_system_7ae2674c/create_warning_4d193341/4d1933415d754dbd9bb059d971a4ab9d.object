{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)4d193341-5d75-4dbd-9bb0-59d971a4ab9d","ParentGuid":"(Guid)fe54070b-3512-4a2f-b490-a57c15f4bfb5","Name":"(string)create_warning","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)7ae2674c-dfc0-4fc1-bcf3-0c9907b49433"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)\nIF NOT OK\t\t\t\t\t\t\t\t\t\t\t\t//  If all of our input conditions are not returning TRUE, something is potentially wrong.\n\tAND SystemTime.dtDateTime <> DT#1970-01-1-00:00:00\t//  Don't begin the process of sending Warnings until our system date/time clock is running.\n\tAND NOT tracking_problem THEN\t\t\t\t\t\t//  This statement should only trigger if we aren't already tracking a potential problem (this acts as a rising trigger, creating a timestamp.)\n\t\ttracking_problem := TRUE;\t\t\t\t\t\t//  Note that we are now tracking a problem\n\t\tproblem_detected_time := TIME();\t\t\t\t//  Note the time we first saw the problem.\nEND_IF\n\nIF OK THEN\t\t\t\t\t\t\t\t\t//  If the system doesn't see anything wrong,\n\ttracking_problem := FALSE;\t\t\t\t//  note that we aren't actively tracking a problem (any more.)\nEND_IF\n\nIF tracking_problem\t\t\t\t\t\t\t\t\t\t\t\t\t//  If we see a problem\n\tAND NOT warning_sent\t\t\t\t\t\t\t\t\t\t\t//  and we haven't already sent a warning for this issue\n\tAND problem_detected_time + time_delay * T#1S < TIME() THEN\t\t//  and it has persisted for at least our specified number of seconds, then\n\t\twarnings (warning_message);\t\t\t\t\t\t\t\t\t//  send our Warning message\n\t\twarning_sent := TRUE;\t\t\t\t\t\t\t\t\t\t//  Note that we've sent a Warning message\nEND_IF\n\nIF (warning_sent\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  If we've previously sent a Warning\n\tOR NOT fix_sent)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  or we may have rebooted and lost track\n\tAND OK \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  and the system now seems to be OK, then: \n\tAND SystemTime.dtDateTime <> DT#1970-01-1-00:00:00 THEN\t\t\t\t\t\t\t\t\t//  Don't begin the process of sending Warnings until our system date/time clock is running.\n\t\tfix_warning_message.detail_warning_visu := warning_message.detail_warning_visu;\t\t//  Copy the associated warning visualization name from the main warning message, since that's how the system matches them up.\n\t\tfix_warning_message.fixed := TRUE;\t\t\t\t\t\t\t\t\t\t\t\t\t//  Set our 'fixed' flag to true, making it a 'fixed' message\n\t\twarnings(fix_warning_message);\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  Send our 'fixed' message.  If there isn't a pre-existing matching warning it just gets ignored.\n\t\twarning_sent := FALSE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  Note that we are no longer in an active warning state\n\t\tfix_sent := TRUE;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  Note that we have sent a fixed message at least once since rebooting and are now sync'd up with the Warning list.\nEND_IF\n\nIF warnings_globals.warningSecondaryReset THEN    \t//  If the Warning system is signalling that we want to reset all warnings, then:\n\ttracking_problem:= FALSE;      \t\t\t\t\t//  Reset our 'problem detected' flag\n\twarning_sent := FALSE;\t\t\t\t\t\t\t//  Reset our 'warning sent' flag\n\tproblem_detected_time:= TIME();\t\t\t\t\t//  Reset the time we last saw this issue so it can't instantly trigger when the reset ends.\nEND_IF\n","LineInfoPersistence":"(string)4d193341-5d75-4dbd-9bb0-59d971a4ab9d_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)//  This function block takes care of some of the drudgery of sending and managing Warning messages.   It has a built-in timer (if you don't want your Warning to trigger\n//  immediately), resets Warnings if the user hits the RESET button on the Warning screen, automatically generates 'fixed' messages (derived from your original Warning\n//  message) and sends that 'fixed' message if the fault condition no longer exists.\n//  It also automatically re-synchronizes warnings with the master Warnings list after a reboot or loss of power (so no persistent variables are needed.)\n\n//  Last modified:  2/6/2024 by Nathan\n//  Last tested:  2/1/2024 by Nathan, working as expected.\n\nFUNCTION_BLOCK create_warning\nVAR_INPUT\n\twarning_message: warning_message;\n\tOK: BOOL;\t\t\t\t\t\t//  If true, the system is OK.   Assign any and all conditions that are required for the system to be considered 'healthy'.  If this evalutates as FALSE, a warning message is sent.\n\ttime_delay: INT:= 2;\t\t\t//  A warning message will not be sent unless the problem persists for this long (in seconds.)\nEND_VAR\nVAR_OUTPUT\n\twarning_sent: BOOL;\t\t\t\t//  TRUE if we are in active warning state (and know it.)\nEND_VAR\nVAR\n\ttracking_problem: BOOL;\t\t\t//  TRUE if we've seen the \"OK\" input turn false.\n\tproblem_detected_time: TIME;\t//  The time we first saw the problem\n\tfix_sent: BOOL;\t\t\t\t\t//  TRUE if we've sent a 'fixed' message at least once since rebooting (and must now be sync'd up with the main Warnings list.)\n\tfix_warning_message: warning_message;\t//  Our internally generated (from the warning_message) 'fixed' notification.\nEND_VAR\n","LineInfoPersistence":"(string)4d193341-5d75-4dbd-9bb0-59d971a4ab9d_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)105","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}