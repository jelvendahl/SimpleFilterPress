{"payload":{"meta":{"Graph":{"@Type":"81297157","@Value":{"Guid":"(Guid)52541907-347a-49ad-ace0-37c95e3ca1d7","ParentGuid":"(Guid)fe54070b-3512-4a2f-b490-a57c15f4bfb5","Name":"(string)Warnings","Properties":{"@Type":"2c41fa04:IDictionary","@Value":[{"@Key":"(Guid)829a18f2-c514-4f6e-9634-1df173429203","@Value":{"@Type":"829a18f2","@Value":{"ParentObjects":{"@Type":"fa2ee218:IDictionary","@Value":[{"@Key":"(Guid)d9b2b2cc-ea99-4c3b-aa42-1e5c49e65b84","@Value":"(Guid)1ec72487-961e-48d9-9aaf-0c51886640cf"}]}}}}]},"TypeGuid":"(Guid)6f9dac99-8de1-4efc-8465-68ac443b7d08","EmbeddedTypeGuids":{"@Type":"[Guid]","@Value":["(Guid)a9ed5b7e-75c5-4651-af16-d2c27e98cb94","(Guid)3b83b776-fb25-43b8-99f2-3c507c9143fc"]}}},"TypeInfos":{"2c41fa04":"{2c41fa04-1834-41c1-816e-303c7aa2c05b}","81297157":"{81297157-7ec9-45ce-845e-84cab2b88ade}","829a18f2":"{829a18f2-c514-4f6e-9634-1df173429203}","fa2ee218":"{fa2ee218-a39b-4b6d-b249-49dbddbd168a}","Guid":"System.Guid","string":"System.String"}},"object":{"Graph":{"@Type":"6f9dac99","@Value":{"SpecialFunc":{"@Type":"0db3d7bb:Enum","@Value":"None"},"Implementation":{"@Type":"3b83b776","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)// This system accepts new incoming warnings and processes them to reset fixed Warnings, delete duplicates, and set the status light.\n// To send a Warning message to the system, create a Warning struct populated with whatever is appropriate/desired, then pass it to the Warnings() function.\n// To mark an existing Warning off as 'Fixed', send a warning message with .detail_warning_visu set to the same value as the Warning you're trying to mark off as fixed and set the .fixed flag to TRUE.   Only those two details are needed.\n\n\n//  Reset the variable that tracks which Warning screen we got to the Warning from.\n//  This ensures that when somebody closes a newly popped warning they will go to the first warning log screen.\n\nwarnings_globals.warning_screen := 1;   \t\n\n//  This section converts our warning visualization name/short code (something like 'W103') into just '103' so it can be stored in a modbus register.\n//  This allows a remote access/monitoring system to easily recover and process the code.\n\ntemp_string := newWarning.detail_warning_visu;\t\t//  First, store the warning visualization's name in a temporary variable:\n\n//  Next, figure out how long the string is (an error code could be anything from 'W1' to 'W32767') and remove the 'W' from the string by truncating the leftmost character.\n//  This presumes that the name of the warning visu is formatted as one letter followed by a number, which is why that naming convention is used.\n\ntemp_string := right (temp_string, (len(newWarning.detail_warning_visu) - 1));\t\t//  Figure out how long the visu name is, then truncate the name x digits from the right end.\nnewWarning.truncated_code := STRING_TO_INT (temp_string);\t\t\t\t\t\t\t//  Convert the remaining string to an int and store that number in the associated field of our Warning.\n\n\n\n//  Some housekeeping to fix up malformed Warning messages:\n\nIF newWarning.detail_warning_visu = '' THEN newWarning.detail_warning_visu := 'no Warning message'; END_IF   //  Gives you a short warning text if you screw up formatting the Warning.\n\nIF NOT newWarning.red AND NOT newWarning.yellow AND NOT newWarning.informational AND NOT newWarning.fixed THEN  //  If somebody forgot to set the warning type, default to red.\n\tnewWarning.red := TRUE;\nEND_IF\n\n//  If the new Warning message is a 'fixed' message, search through the existing warning list and replace the old active warning message with the new 'fixed' message:\n\nIF newWarning.fixed = TRUE  THEN   \n\tIF VisuElems.CurrentVisu = newWarning.detail_warning_visu THEN  \t//  If a new fixed message corresponds to the currently shown Warning visualization, close it and go to the main screen.\n\t\tVisuElems.CurrentVisu := 'Main_screen';\t\t\t\t\t\t\t//  We go to the main screen instead of the Warnings log because e-stop interruptions can be frequent and transient on systems with light curtains.\n\tEND_IF     \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  Attempts to go to a 'previous shown' screen can create dead-end loops that trap the operator if two such screens appear one after the other.\n\tmyCounter := 1;\n\tFOR myCounter := 1 TO 16 BY 1 DO \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  Step through the list of Warnings.\n\t\tIF newWarning.detail_warning_visu = pVars.myWarnings[myCounter].detail_warning_visu THEN\t\t//  If we find a match for our 'fixed' message,\n\t\t\tpVars.myWarnings[myCounter].fixed := TRUE;\t\t\t\t\t\t\t\t\t\t\t\t\t//  Mark off the existing warning as 'fixed'\n\t\t\tpVars.myWarnings[myCounter].red := FALSE;\n\t\t\tpVars.myWarnings[myCounter].yellow := FALSE;\n\t\t\tpVars.myWarnings[myCounter].fixed_date_time := SystemTime.dtDateTime;\t\t\t\t\t\t//  And timestamp when it was fixed.\n\t\tEND_IF\n\tEND_FOR\nEND_IF\n\n\nIF NOT newWarning.fixed THEN  \t\t\t\t\t\t\t\t\t\t//  This routine triggers only if the new warning is NOT a 'fixed' message.\n\twarnings_globals.siren := newWarning.audible_alarm;\t\t\t\t//  Turn on the siren if the Warning message requested it.\n\tmyCounter := 1;\n\tsubcounter := 1;\n\tnewWarning.time_stamp := SystemTime.dtDateTime;   \t\t\t\t//  Record when the new Warning message was sent.\n\tWHILE mycounter <> 16 DO  \t\t\t\t\t\t\t\t\t\t//  This loop looks for and removes duplicate Warnings.\n\t\tIF newWarning.detail_warning_visu = pVars.myWarnings[myCounter].detail_warning_visu THEN\n\t\t\tsubCounter := myCounter;\n\t\t\t\tWHILE subcounter <> 16 DO   \t\t\t\t\t\t//  Delete the older duplicated warning, and shift the remaining warnings up 1 slot in the list.\n\t\t\t\t\tpVars.myWarnings[subcounter] := pVars.myWarnings[subcounter + 1];\n\t\t\t\t\tsubcounter := subcounter + 1;\n\t\t\t\tEND_WHILE\n\t\t\tpVars.myWarnings[16] := emptyWarning;  \t\t//sets the last Warning to empty (since its former occupant has been shifted up one and there's nothing else to replace it with.)\n\t\tEND_IF\n\t\tmycounter := mycounter + 1;\n\tEND_WHILE\n\t\n\t//  At this point we have dealt with fixed messages and deleted old duplicates, so now we want to shift the existing list of warnings down 1 slot to make room\n\t//  for the new warning at the top of the list ( pvars.myWarnings[1] )\n\tsubcounter := 16;\n\tWHILE subcounter <> 1 DO\n\t\t\t\tpVars.myWarnings[subcounter] := pVars.myWarnings[subcounter - 1];\n\t\t\t\tsubcounter := subcounter - 1;\n\tEND_WHILE\n\tpVars.myWarnings[1] := newWarning;\nEND_IF\n\n//  Now that we have added the new Warning to the list (in whatever manner was appropriate), we want to sort the list to move\n//  'fixed' messages to the bottom of the list (as the least relevent pieces of information.)\n\nmycounter := 1;\n\nWHILE mycounter < 16 DO\n\t\tIF pvars.myWarnings[mycounter].fixed\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//  If the warning we are currently examining is a 'fixed' one\n\t\t\tAND (pvars.myWarnings[mycounter + 1].red OR pvars.myWarnings[mycounter + 1].yellow) THEN\t//  and the next Warning down the list is an active one, then\n\t\t\t\ttempWarning := pvars.myWarnings[mycounter + 1];\t\t\t\t\t\t\t\t\t\t\t//  Copy the next warning to a temp variable\n\t\t\t\tpvars.myWarnings[mycounter + 1] := pvars.myWarnings[mycounter];\t\t\t\t\t\t\t//  Write the current Warning to the next slot\n\t\t\t\tpvars.myWarnings[mycounter] := tempWarning;\t\t\t\t\t\t\t\t\t\t\t\t//  and copy the active warning into the (higher) slot the 'fixed' warning used to occupy.\n\t\tEND_IF\n\tmycounter := mycounter + 1;\t\t\t\t//  ...and work our way down the list repeating this process.\nEND_WHILE\n\n\n\n//  If the flag is set for a GLOBAL Warning pop-up, switch to that Warning detail screen, then disable the flag.\n(*\nIF pVars.myWarnings[1].pop_up_everywhere\t\t\t\t\t\t\t\t\t//  Is this warning set to change the screen?\n\tAND NOT warnings_globals.in_setup\t\t\t\t\t\t\t\t\t\t//  Are we not in the set-up process?  (Enabling sub-systems can create a storm of Warnings, which drags you out of the config screens.)\n\tAND warnings_globals.last_pop_up_time + T#30S < TIME() THEN    \t\t\t//  We suppress the globabl pop-up if we've already had a pop-up within the last 30 seconds.\n\t\tVisuElems.CurrentVisu := pVars.myWarnings[1].detail_warning_visu;\t//  Pop goes the warning screen!\n\t\twarnings_globals.last_pop_up_time := TIME();  \t\t\t\t\t\t\t\t\t\t\t\t\t//  Reset our time stamp for when a pop-up last occurred.\nEND_IF\n*)\n\n\n\n//  Re-evaluate status light color (and Warnings button indicators for the main screen.)\n\n//  Step through the Warnings list, adding up how many active red warnings we have.\n\tmyCounter := 1;\n\tredWarningCount := 0;\n\tFOR myCounter := 1 TO 16 BY 1 DO\n\t\tIF pVars.myWarnings[myCounter].red AND NOT pVars.myWarnings[mycounter].fixed THEN\n\t\t\tredWarningCount := redWarningCount + 1;\n\t\tEND_IF\n\tEND_FOR\n\t\n\tIF redWarningCount > 0 THEN\t\t\t\t\t//  Record whether or not there's an active red warning\n\t\tpVars.redWarningPresent := TRUE;\n\t\tELSE\n\t\tpVars.redWarningPresent := FALSE;\n\tEND_IF\n\n//  Step through the Warnings list, adding up how many active yellow warnings we have.\n\tmyCounter := 1;\n\tyellowWarningCount := 0;\n\tFOR myCounter := 1 TO 16 BY 1 DO\n\t\tIF pVars.myWarnings[myCounter].yellow AND NOT pVars.myWarnings[mycounter].fixed THEN\n\t\t\tyellowWarningCount := yellowWarningCount + 1;\n\t\tEND_IF\n\tEND_FOR\n\t\n\tIF yellowWarningCount > 0 THEN\t\t\t\t//  Record whether or not there's an active yellow warning.\n\t\tpVars.yellowWarningPresent := TRUE;\n\t\tELSE\n\t\tpVars.yellowWarningPresent := FALSE;\n\tEND_IF\n\n//  Step through the Warnings list, adding up how many informational (blue) messages we have.\nmyCounter := 1;\n\tblueWarningCount := 0;\n\tFOR myCounter := 1 TO 16 BY 1 DO\n\t\tIF pVars.myWarnings[myCounter].informational AND NOT pVars.myWarnings[mycounter].fixed THEN\n\t\t\tblueWarningCount := blueWarningCount + 1;\n\t\tEND_IF\n\tEND_FOR\n\t\n\tIF blueWarningCount > 0 THEN\t\t\t\t//  Record whether or not there's an informational message.\n\t\tpVars.blueWarningPresent := TRUE;\n\t\tELSE\n\t\tpVars.blueWarningPresent := FALSE;\n\tEND_IF\n\n//  This resets the LED backlight on the physical Warnings button on the main screen:\n\nvisu_context.update_now := TRUE;\t\t\t\t\t//  Update the HMI (button lights, warning indicators.)\n","LineInfoPersistence":"(string)52541907-347a-49ad-ace0-37c95e3ca1d7_Impl_LineIds"}}}},"Interface":{"@Type":"a9ed5b7e","@Value":{"TextDocument":{"@Type":"f3878285","@Value":{"TextBlobForSerialisation":"(string)FUNCTION Warnings\nVAR_INPUT\n\tnewWarning: warning_message;\t\t\t\t//  The incoming warning message recieved by this function from another process in the system.  See Warning (struct).\nEND_VAR\nVAR\n\ttempWarning: warning_message;\t\t//  Temporarily holds data for some sorting/shifting operations.\n\tmyCounter: INT := 0;\t\t\t\t//  A couple counter ints for loops\n\tsubCounter: INT := 0;\n\temptyWarning: warning_message;\t\t// Used to copy to slots in pvars.myWarnings to clear that slot.\n\tredWarningCount: INT;\t\t\t\t// The total number of active red warnings, used for interface elements like the status light.\n\tyellowWarningCount: INT;\t\t\t// The total number of active yellow warnings, used for interface elements like the status light.\n\tblueWarningCount: INT;\t\t\t\t// The total number of active informational messages, used for interface elements like the Warning log button.\n\ttemp_string: STRING;\t\t\t\t//  Briefly store a string while converting it into a number to store in our remote access registers.\nEND_VAR\n","LineInfoPersistence":"(string)52541907-347a-49ad-ace0-37c95e3ca1d7_Decl_LineIds"}}}},"UniqueIdGenerator":"(string)932","POULevel":{"@Type":"8e575c5b:Enum","@Value":"Standard"},"ChildObjectGuids":{"@Type":"ArrayList:IList","@Value":[]},"AddAttributeSubsequent":"(bool)False"}},"TypeInfos":{"0db3d7bb":"{0db3d7bb-cde0-4416-9a7b-ce49a0124323}","3b83b776":"{3b83b776-fb25-43b8-99f2-3c507c9143fc}","6f9dac99":"{6f9dac99-8de1-4efc-8465-68ac443b7d08}","8e575c5b":"{8e575c5b-1d37-49c6-941b-5c0ec7874787}","a9ed5b7e":"{a9ed5b7e-75c5-4651-af16-d2c27e98cb94}","ArrayList":"System.Collections.ArrayList","bool":"System.Boolean","f3878285":"{f3878285-8e4f-490b-bb1b-9acbb7eb04db}","string":"System.String"}}},"FormatVersion":"1.0"}